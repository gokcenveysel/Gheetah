@model Gheetah.Models.ProcessModel.ProcessInfo
@Html.AntiForgeryToken()

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex align-items-center justify-content-between">
                        <h3 class="card-title">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-terminal-2 me-2" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <path d="M8 9l3 3l-3 3"></path>
                                <path d="M13 15l3 0"></path>
                                <path d="M3 4m0 2a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2z"></path>
                            </svg>
                            Process Execution Output
                        </h3>
                        <div class="status-badge">
                            @if (Model.Status.Equals("Running"))
                            {
                                <span class="badge bg-green-lt">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-circle-check" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                        <path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"></path>
                                        <path d="M9 12l2 2l4 -4"></path>
                                    </svg>
                                    Running
                                </span>
                            }
                            else if (Model.Status.Equals("Completed"))
                            {
                                <span class="badge bg-blue-lt">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-check" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                        <path d="M5 12l5 5l10 -10"></path>
                                    </svg>
                                    Completed
                                </span>
                            }
                            else if (Model.Status.Equals("Cancelled"))
                            {
                                <span class="badge bg-red-lt">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-x" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                        <path d="M18 6l-12 12"></path>
                                        <path d="M6 6l12 12"></path>
                                    </svg>
                                    Cancelled
                                </span>
                            }
                        </div>
                    </div>
                    <div class="mt-1">
                        <div class="d-flex align-items-center text-muted" style="margin-left:1rem!important">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-id me-1" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <path d="M3 4m0 3a3 3 0 0 1 3 -3h12a3 3 0 0 1 3 3v10a3 3 0 0 1 -3 3h-12a3 3 0 0 1 -3 -3z"></path>
                                <path d="M9 10m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0"></path>
                                <path d="M15 8l2 0"></path>
                                <path d="M15 12l2 0"></path>
                                <path d="M7 16l10 0"></path>
                            </svg>
                            <small>Process ID: @Model.Id</small>
                        </div>
                    </div>
                </div>

                <div class="card-body p-0" style="height: 70vh; overflow-y: auto;">
                    <div class="console-output p-4">
                        @foreach (var line in Model.Output)
                        {
                            <pre class="mb-1">@line</pre>
                        }
                        <div id="realTimeOutput"></div>
                    </div>
                </div>

                <div class="card-footer">
                    <div class="d-flex justify-content-end">
                        <button id="cancelProcessBtn" class="btn btn-danger">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-player-stop" width="16" height="16" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <path d="M5 5m0 2a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v10a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2z"></path>
                            </svg>
                            Abort Process
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: 1px solid var(--tblr-border-color);
        box-shadow: var(--tblr-card-box-shadow);
    }

    .console-output {
        background-color: var(--tblr-bg-surface-secondary);
        color: var(--tblr-body-color);
        font-family: var(--tblr-font-monospace);
        font-size: 0.875rem;
    }

    .console-output pre {
        margin: 0;
        white-space: pre-wrap;
        word-break: break-word;
        border-left: 3px solid var(--tblr-border-color);
        padding-left: 0.75rem;
        line-height: 1.5;
    }

    #realTimeOutput pre {
        margin: 0;
        white-space: pre-wrap;
        word-break: break-word;
        border-left: 3px solid var(--tblr-primary);
        padding-left: 0.75rem;
        line-height: 1.5;
    }

    .status-badge .badge {
        display: inline-flex;
        align-items: center;
        gap: 0.25rem;
    }
</style>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script>
        const processId = '@Model.Id';

        // Cancel İşlemi
        document.getElementById('cancelProcessBtn').addEventListener('click', () => {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('@Url.Action("CancelProcess", "Scenarios")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ processId: processId })
            })
            .then(response => response.json())
            .then(data => {
                if(data.success) {
                    toastr.success('Process aborted successfully');
                } else {
                    toastr.error('Failed to abort process');
                }
            })
            .catch(error => toastr.error('Error:', error));
        });

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/outputHub")
            .build();

        connection.on("ReceiveOutput", (message) => {
            const outputDiv = document.getElementById("realTimeOutput");
            const pre = document.createElement("pre");
            pre.textContent = message;
            outputDiv.appendChild(pre);
            outputDiv.scrollIntoView({ behavior: 'smooth', block: 'end' });
        });

        connection.start()
            .then(() => connection.invoke("JoinGroup", processId))
            .catch(console.error);

        connection.on("ProcessCancelled", () => {
            toastr.warning("Process was cancelled");
            window.location.reload();
        });

        document.addEventListener('DOMContentLoaded', function() {
            const outputDiv = document.querySelector('.card-body');
            outputDiv.scrollTop = outputDiv.scrollHeight;
        });
    </script>
}